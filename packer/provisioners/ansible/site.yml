---
- name: THREDDS Test Environment playbook.
  hosts: all
  remote_user: "{{ thredds_test_user }}" # Defined in packer config
  become: yes
  become_method: sudo
  tasks:
    # Create temp build directory.
    - name: Initialize build environment.
      include_role:
        name: init
      tags: [ init ]

    # The next two tasks take a good amount of time to run, and as a result
    # utilize asynchronous task execution. We run these early on in the
    # playbook to keep things moving.
    - name: Include 'libnetcdf-and-deps' role.
      include_role:
        name: libnetcdf-and-deps
      tags: [ libnetcdf ]

    - name: Include 'Miniconda 3' role.
      include_role:
        name: miniconda
      tags: [ miniconda ]

    # The next few are either relatively fast, or run apt (which blocks other
    # calls to apt), so we run them synchronously.
    - name: Install OS managed tools by needed to provision the environment or are used by downstream test builds.
      include_role:
        name: general-packages
      tags: [ general-packages ]

    # Creates user who runs thredds projects test, so must run before tasks
    # that require access to that user id or its home directory.
    - name: Include 'security' role.
      include_role:
        name: security
      tags: [ security ]

    - name: Include 'temurin' role.
      include_role:
        name: temurin
      tags: [ temurin ]

    - name: Include 'zulu' role.
      include_role:
        name: zulu
      tags: [ zulu ]

    - name: Include 'corretto' role.
      include_role:
        name: corretto
      tags: [ corretto ]

    - name: Include 'maven' role.
      include_role:
        name: maven
      tags: [ maven ]

    - name: Include 'thredds-test-data-mount-prep' role.
      include_role:
        name: thredds-test-data-mount-prep
      tags: [ thredds-test-data-mount-prep ]

    # Wait for the asynchronous tasks to complete.
    - name: Wait for zlib async test task to complete.
      when: (async_zlib is defined) and (async_zlib|length > 0)
      async_status:
        jid: "{{ async_zlib.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ zlib_async_check_interval }}"
      delay: "{{ zlib_async_check_retries }}"

    - name: Wait for miniconda install async task to complete.
      when: (async_miniconda is defined) and (async_miniconda|length > 0)
      async_status:
        jid: "{{ async_miniconda.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ miniconda_async_check_interval }}"
      delay: "{{ miniconda_async_check_retries }}"

    - name: Wait for netcdf-c async test task to complete.
      when: (async_netcdf_c is defined) and (async_netcdf_c|length > 0)
      async_status:
        jid: "{{ async_netcdf_c.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ netcdf_c_async_check_interval }}"
      delay: "{{ netcdf_c_async_check_retries }}"

    - name: Wait for the HDF5 async test task to complete.
      when: (async_hdf5 is defined) and (async_hdf5|length > 0)
      async_status:
        jid: "{{ async_hdf5.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ hdf5_async_check_retries }}"
      delay: "{{ hdf5_async_check_interval }}"

    # Now that asynchronous tasks are complete, it should be safe to cleanup
    # the build environment.
    - name: Cleanup build environment.
      include_role:
        name: cleanup
      tags: [ cleanup ]
